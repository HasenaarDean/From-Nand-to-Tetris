/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
        ALU(x=x, y=y, no=instruction[0], f=instruction[1], ny=instruction[2], zy=instruction[3], nx=instruction[4], 
                                zx=instruction[5],
                                out=aluOut, zr=aluZr, ng=aluNg); // compute regular alu
        
        Mul(a=x, b=y, out=xMULTy); // x*y

        // compute shifts
        ShiftRight(in=y, out=SRy);
        ShiftLeft(in=y, out=SLy);
        ShiftRight(in=x, out=SRx);
        ShiftLeft(in=x, out=SLx);

        Mux4Way16(a=SRy, b=SRx, c=SLy, d=SLx, sel=instruction[4..5], out=ShiftMuxOut); // choose shift to output

        Mux4Way16(a=xMULTy, b=ShiftMuxOut, c=xMULTy, d=aluOut, sel=instruction[7..8], out=tempOut, out=out,
                    out[0..7] = out1, out[8..15] = out2, out[15]=msb); // choose output from instruction 
        
        // compute ng and zr
        Or8Way(in=out1, out=zr1);
        Or8Way(in=out2, out=zr2);
        Or(a=zr1, b=zr2, out=nzr);
        Not(in=nzr, out=zr);

        And(a=msb, b=true, out=ng);
        
}
